type Query {
  users: [User]!
  user(id: ID!): User!
  teams: [Team]!
  team(id: ID!): Team!
  tickets: [Ticket]!
  ticket(id: ID!): Ticket!
  projects: [Project]!
  project(id: ID!): Project!
}
type Mutation {
  createUser(input: UserInput!): User!
  createTicket(input: TicketInput!): Ticket!
  createProject(input: ProjectInput!): Project!
  createTeam(input: TeamInput!): Team!
  removeTeam(team_id: Int!): Int!
  addUserToTeam(user_id: Int! team_id: Int!): Team!
  removeUserFromTeam(user_id: Int! team_id: Int!): Team!
  addTeamToProject(team_id: Long! project_id: Long!): Project!
  removeTeamFromProject(team_id: Long! project_id: Long!): Project!
  addUserTicket(user_id: Int!, ticket_id: Int!): User!
  updateTicket(input: TicketInput!): Ticket!
  deleteUserTicket(user_id: Int!, ticket_id: Int!): Int!
  deleteTicket(ticket_id: Int!): Int!
}

input TicketInput {
  id: Int
  name: String!
  description: String!
  point: String!
  status: Int!
  projectId: Int!
}

input UserInput {
  email: String!
  name: String!
  username: String!
  password: String!
}

input TeamInput {
  name: String!
  prefix: String!
}

input ProjectInput {
  name: String!
  description: String!
  startTime: String!
  endTime: String!
}

type Ticket {
  id: Int!
  name: String!
  description: String!
  point: String!
  status: Int!
  owners: [User]!
  project: Project!
}

type User {
  id: Int!
  email: String!
  name: String!
  username: String!
  password: String!
  tickets: [Ticket]!
  teams: [Team]!
}

type Team {
  id: Int!
  name: String!
  prefix: String!
  members: [User]
  projects: [Project]
}

type Project {
  id: Int!
  name: String!
  description: String!
  startTime: String!
  endTime: String!
  tickets: [Ticket]!
  teams: [Team]!
}
